generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model stores {
    id     Int     @id @default(autoincrement())
    cnpj   String  @unique @db.VarChar(255)
    name   String  @db.VarChar(255)
    phone  String  @db.VarChar(255)
    active Boolean @default(true)
    email  String  @db.VarChar(255)

    address_cep          String    @default("") @db.VarChar(255)
    address_uf           String    @default("") @db.VarChar(255)
    address_city         String    @default("") @db.VarChar(255)
    address_neighborhood String    @default("") @db.VarChar(255)
    address_street       String    @default("") @db.VarChar(255)
    address_number       String?   @default("") @db.VarChar(255)
    created_at           DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    updated_at           DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)

    users         users[]
    awards        awards[]
    promotions    promotions[]
    users_history users_history[]
}

model users {
    id         Int       @id @default(autoincrement())
    cpf        String    @unique @db.VarChar(255)
    email      String    @unique @db.VarChar(255)
    name       String    @db.VarChar(255)
    phone      String    @db.VarChar(255)
    sex        String    @default("m")
    birthDate  String    @default("00/00/0000") @db.VarChar(255)
    active     Boolean
    role       String
    storeId    Int?
    password   String    @db.VarChar(255)
    created_at DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    updated_at DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)

    stores                 stores?                  @relation(fields: [storeId], references: [id], onDelete: Cascade)
    rewards                rewards[]
    users_history          users_history[]
    promotions_users_point promotions_users_point[]
}

model users_history {
    id         Int       @id @default(autoincrement())
    userId     Int
    storeId    Int
    action     String    @db.VarChar(255)
    created_at DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)

    users  users  @relation(fields: [userId], references: [id], onDelete: Cascade)
    stores stores @relation(fields: [storeId], references: [id], onDelete: Cascade)
}

model awards {
    id         Int          @id @default(autoincrement())
    storeId    Int
    name       String       @db.VarChar(255)
    price      Float
    active     Boolean      @default(true)
    image_url  String       @db.VarChar(255)
    created_at DateTime?    @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    updated_at DateTime?    @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    stores     stores       @relation(fields: [storeId], references: [id], onDelete: Cascade)
    promotions promotions[]
}

model rewards {
    id            Int       @id @default(autoincrement())
    operatorId    Int
    promoPointsId Int
    delivered     Boolean   @default(false)
    created_at    DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    updated_at    DateTime? @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)

    users users @relation(fields: [operatorId], references: [id], onDelete: Cascade)
}

model promotions {
    id                     Int                      @id @default(autoincrement())
    awardId                Int
    storeId                Int
    name                   String                   @db.VarChar(255)
    points                 Int
    maxWinners             Int                      @default(0)
    active                 Boolean                  @default(true)
    created_at             DateTime?                @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    updated_at             DateTime?                @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    stores                 stores                   @relation(fields: [storeId], references: [id], onDelete: Cascade)
    awards                 awards                   @relation(fields: [awardId], references: [id], onDelete: Cascade)
    promotions_users_point promotions_users_point[]
}

model promotions_users_point {
    id          Int        @id @default(autoincrement())
    userId      Int
    promotionId Int
    points      Int
    maxPoints   Int
    created_at  DateTime?  @default(dbgenerated("CURRENT_TIMESTAMP(6)")) @db.Timestamp(6)
    users       users      @relation(fields: [userId], references: [id], onDelete: Cascade)
    promotions  promotions @relation(fields: [promotionId], references: [id], onDelete: Cascade)
}
